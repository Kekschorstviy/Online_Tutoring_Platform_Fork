package de.thu.thutorium.database.dbObjects;

import jakarta.persistence.*;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Set;

import lombok.*;

/**
 * Represents a user account entity within the system. This entity is mapped to the "user_account"
 * table in the database.
 *
 * <p>Includes basic user information such as first name, last name, role, verification status, and
 * the account creation timestamp.
 *
 * <p>Lombok annotations are used to automatically generate boilerplate code like getters, setters,
 * and constructors.
 */
@Entity
@Table(name = "user_account")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class UserDBO {
  /**
   * The unique identifier for the user. This value is automatically generated by the database.
   */
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  @Column(name = "user_id")
  @Setter(AccessLevel.NONE)
  private Long userId;
}

//  /** The first name of the user. This field is mandatory and cannot be null. */
//  @Column(name = "first_name", nullable = false)
//  private String firstName;
//
//  /** The last name of the user. This field is mandatory and cannot be null. */
//  @Column(name = "last_name", nullable = false)
//  private String lastName;
//
//  /** The user's email, used for login. This field must be unique. */
//  @Column(name = "email_address", nullable = false, unique = true)
//  private String email;
//
//  /** The hashed password for authentication. This field is mandatory. */
//  @Column(name = "hashed_password", nullable = false)
//  private String password;
//
//  /**
//   * The roles of the user within the system, such as STUDENT, TUTOR etc. Multiple roles are foreseen:
//    * a tutor could also be a student,
//    * an admin could be a verifier.
//   * The user roles are resolved into another table with n:m relationship, in order to not violate
//   * the database normalization principles.
//   */
//
//
//  @Column(nullable = false)
//  private Set<UserRole> roles ;
//
//  /** Indicates whether the user's email is verified. Defaults to {@code false} if not specified. */
//  @Column(name = "is_verified", nullable = false)
//  private Boolean isVerified = false;
//
//  /**
//   * The timestamp when the user account was created. This field is mandatory and cannot be null.
//   */
//  @Column(name = "created_at", nullable = false)
//  private LocalDateTime createdAt;
//
//  /**
//   * Represents the list of courses associated with this user if they are a tutor.
//   *
//   * <p>This relationship is mapped by the {@code tutor} field in the {@link Course} entity. The
//   * cascade type {@code CascadeType.ALL} ensures that all operations (such as persist and remove)
//   * are propagated to the associated courses. Additionally, {@code orphanRemoval = true} guarantees
//   * that courses that no longer have a tutor reference are automatically deleted.
//   *
//   * <p>If this user is deleted, all their associated courses will also be deleted due to the
//   * cascading operations defined in this relationship.
//   *
//   * @see Course
//   */
//  @OneToMany(mappedBy = "tutor", cascade = CascadeType.ALL, orphanRemoval = true)
//  private List<Course> courses;
//
//  /** List of ratings related to this user, either as a tutor or a student. */
//  @OneToMany(mappedBy = "ratedUser", cascade = CascadeType.ALL, orphanRemoval = true)
//  private List<Rating> ratings;
//
//
//
//  /** A long description of the tutor. This field is optional and can be null. */
//  @Column(name = "tutor_description", length = 1500)
//  private String tutor_description;
//}
