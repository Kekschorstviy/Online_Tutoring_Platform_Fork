package de.thu.thutorium.database.dbObjects;

import jakarta.persistence.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Set;

import lombok.*;

/**
 * Represents a course entity. This entity is mapped to the {@code course} table in the database.
 * <p> It includes information such as the course name, description, start date, end
 * date, etc.
 * <p> Lombok annotations are used to automatically generate boilerplate code like getters, setters, and constructors.
 * <p>
 */
@Entity
@Table(name = "course")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class CourseDBO {
  /**
   * The unique identifier for the course. This value is automatically generated by the database.
   */
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  @Column(name = "course_id")
  @Setter(AccessLevel.NONE)
  private Long courseId;

  /**
   * Participants of this course.
   * <p>Defines a many-to-many relationship with {@link UserDBO} using the join table
   * "user_course" denoting the courses and the users who enrol in them. The cascade types {@code PERSIST},
   * {@code MERGE}, and {@code REFRESH} ensure that these operations are propagated to the associated participants.
   */
  @ManyToMany(mappedBy = "courses", cascade = { CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH })
  private Set<UserDBO> participants;

  /** The name of the course. This field is mandatory and cannot be null. */
  @Column(name = "course_name", nullable = false)
  private String courseName;

  /**
   * Categories associated with this course.
   * <p>Defines a many-to-many relationship with {@link CourseCategoryDBO} using the
   * join table "courses_categories". The cascade types {@code PERSIST}, {@code MERGE}, and {@code REFRESH} ensure
   * that these operations are propagated to the associated categories. The counterpart is denoted by a Set<CourseDBO> #
   * called 'courses' in {@link CourseCategoryDBO}.
   */
  @ManyToMany(cascade = { CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH })
  @JoinTable(name = "courses_categories",
          joinColumns = @JoinColumn(name = "course_id"),
          inverseJoinColumns = @JoinColumn(name = "category_id")
  )
  private Set<CourseCategoryDBO> courseCategories;

  /**
   * A short description of the course (1-2 sentences). This field is mandatory and cannot be null.
   */
  @Column(name = "description_short", nullable = false)
  private String descriptionShort;

  /** A long description of the course. This field is optional and can be null. */
  @Column(name = "description_long", columnDefinition = "TEXT")
  private String descriptionLong;

  /**
   * The timestamp when the course was created. This field is mandatory and cannot be {@code null}.
   */
  @Column(name = "created_on", nullable = false)
  private LocalDateTime createdOn;

  /** The start date of the course. This field is optional and can be {@code null}. */
  @Column(name = "start_date")
  private LocalDate startDate;

  /** The end date of the course. This field is optional and can be {@code null}. */
  @Column(name = "end_date")
  private LocalDate endDate;


  /**
   * Ratings received by a course from students.
   * <p> Defines a one-to-many relationship with {@link RatingCourseDBO}.
   * The cascade type {@code ALL} ensures that all operations are propagated to the associated ratings.
   * The {@code orphanRemoval} attribute ensures that ratings are removed if they are no longer associated with the tutor.
   */
  @OneToMany(mappedBy = "course", cascade = CascadeType.ALL, orphanRemoval = true)
  private List<RatingCourseDBO> receivedCourseRatings;
}
